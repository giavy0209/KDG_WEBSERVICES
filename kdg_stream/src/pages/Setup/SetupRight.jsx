import PropTypes from 'prop-types';
import React, { useState } from 'react';
import * as GoIcon from 'react-icons/go';
import * as MdIcon from 'react-icons/md';
import * as RiIcon from 'react-icons/ri';
import { useHistory } from 'react-router';
import { Tab, TabPane } from '../../components';
import { RTMP_DOMAIN } from '../../constant';

const SetupRight = props => {
  const { Stream, readURL, handlePublicStream, handleStopStream, CopyToClipboard } = props;

  const history = useHistory();
  const [isHideStreamKey, setIsHideStreamKey] = useState(false);

  return (
    <>
      <Tab>
        <TabPane name='Connect' key='1'>
          <div className='setup__tabConnect'>
            <div className='setup__tabConnect-title'>Connect Your Live Streams To The Live API</div>
            <div className='setup__tabConnect-desc'>User live streaming software or a hardware</div>
            <div className='setup__tabConnect-desc'>
              Enter the information below into your software's setting:
            </div>

            <div className='setup__tabConnect-info mb-40'>
              <div>
                <p>Server URL</p>
                {Stream?.key && <p>{isHideStreamKey ? '*****' : RTMP_DOMAIN}</p>}
                <div
                  className='setup__tabConnect-info-button'
                  onClick={() => CopyToClipboard(RTMP_DOMAIN)}
                >
                  <MdIcon.MdContentCopy className='icon' />
                </div>
              </div>
              <div>
                <p>Stream Key</p>
                {Stream?.key && <p>{isHideStreamKey ? '*****' : Stream?.key}</p>}
                <div
                  className='setup__tabConnect-info-button'
                  onClick={() => CopyToClipboard(Stream?.key)}
                >
                  <MdIcon.MdContentCopy className='icon' />
                </div>
              </div>
            </div>

            <div className='setup__tabConnect-buttonBox mb-40'>
              <div
                className='setup__tabConnect-buttonBox-button'
                onClick={() => setIsHideStreamKey(x => !x)}
              >
                {isHideStreamKey ? 'Show' : 'Hide'}
              </div>

              <div className='setup__tabConnect-buttonBox-button'>Reset</div>
            </div>
            <div className='setup__tabConnect-warning'>
              <div className='setup__tabConnect-warning-iconBox'>
                <RiIcon.RiErrorWarningLine className='icon' />
              </div>
              <div className='setup__tabConnect-warning-text'>
                B·∫•t k·ª≥ ai c√≥ Stream Key n√†y ƒë·ªÅu c√≥ th·ªÉ ph√°t tr·ª±c ti·∫øp tr√™n n·ªÅn t·∫£ng Livestream
                Kingdomgame 4.0 c·ªßa b·∫°n. ƒê·∫£m b·∫£o r·∫±ng b·∫°n gi·ªØ m√£ Key n√†y an to√†n.
              </div>
            </div>
          </div>
        </TabPane>

        <TabPane name='Setup' key='2'>
          <form onSubmit={handlePublicStream} className='setup__tabSetup'>
            <div className='setup__tabSetup-inputBox'>
              <input type='text' name='name' placeholder='Title' />
            </div>

            <div className='setup__tabSetup-textareaBox mt-20'>
              <textarea name='description' placeholder='Something about this livestream'></textarea>
            </div>

            {/* <div className='setup__tabSetup-radioBox mt-20'>
              <div
                className={`inputRadio mr-100 ${currentRadio === 0 ? 'active' : ''}`}
                onClick={() => setCurrentRadio(0)}
              >
                <div className='circle mr-10'></div>
                <div className='text'>Public</div>
              </div>
              <div
                className={`inputRadio ${currentRadio === 1 ? 'active' : ''}`}
                onClick={() => setCurrentRadio(1)}
              >
                <div className='circle mr-10'></div>
                <div className='text'>Only me</div>
              </div>
            </div> */}

            {/* <div className='setup__tabSetup-type mt-20'>
              <p className='mb-20'>Th·ªÉ lo·∫°i (T·ªëi ƒëa 3 th·ªÉ lo·∫°i)</p>
              <div className='dropdown'>
                <div
                  className='dropdown__selected'
                  onClick={() => setIsShowDropdown(!isShowDropdown)}
                >
                  <TiIcon.TiArrowSortedDown
                    className={`dropdown__selected-arrowIcon ${isShowDropdown ? 'rotate' : ''}`}
                  />
                  <div className='dropdown__selected-item' onClick={e => e.stopPropagation()}>
                    <span>Tr√≤ ch∆°i tr√≠ tu·ªá</span>
                    <RiIcon.RiCloseFill />
                  </div>
                  <div className='dropdown__selected-item' onClick={e => e.stopPropagation()}>
                    <span>Th·ªÉ thao</span>
                    <RiIcon.RiCloseFill />
                  </div>
                  <div className='dropdown__selected-item' onClick={e => e.stopPropagation()}>
                    <span>Du l·ªãch</span>
                    <RiIcon.RiCloseFill />
                  </div>
                </div>
                <div className={`dropdown__list ${isShowDropdown ? 'd-block' : ''}`}>
                  <div className='dropdown__list-item'>
                    <span>Tr√≤ ch∆°i tr√≠ tu·ªá</span>
                    <FaIcon.FaCheck className='d-block' />
                  </div>
                  <div className='dropdown__list-item'>
                    <span>Th·ªÉ thao</span>
                    <FaIcon.FaCheck className='d-block' />
                  </div>
                  <div className='dropdown__list-item'>
                    <span>Du l·ªãch</span>
                    <FaIcon.FaCheck className='d-block' />
                  </div>
                </div>
              </div>
            </div> */}

            <div className='setup__tabSetup-note mt-30'>
              <p>L∆∞u √Ω</p>
              <p>
                - ƒê·∫£m b·∫£o trong qu√° tr√¨nh livestream kh√¥ng c√≥ h√†nh ƒë·ªông, l·ªùi n√≥i mang t√≠nh ch·∫•t b·∫°o
                ƒë·ªông, ph·∫£n c√°ch m·∫°ng.
              </p>
              <p>- Kh√¥ng s·ª≠ d·ª•ng h√¨nh ·∫£nh ngh·ªá sƒ© n·ªïi ti·∫øng khi ch∆∞a c√≥ s·ª± cho ph√©p.</p>
            </div>
            <div className='setup__tabSetup-thumbnailBox mt-20'>
              <input type='file' name='thumbnail' onChange={readURL} />
              <img src='' alt='' style={{ display: 'none' }} />
              <GoIcon.GoCloudUpload className='icon' />
              <p>Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng JPG, JPEG, PNG. K√≠ch th∆∞·ªõc t·ªáp t·ªëi ƒëa = 2MB</p>
              <p>ƒê·ªÉ ƒë·∫£m b·∫£o h√¨nh ·∫£nh thu h√∫t ng∆∞·ªùi xem, vui l√≤ng s·ª≠ d·ª•ng h√¨nh ·∫£nh s·∫Øc n√©t</p>
            </div>

            {Stream.status === 1 && (
              <div
                style={{ textAlign: 'center', cursor: 'pointer', textDecoration: 'underline' }}
                className='mt-20'
                onClick={() => history.push('/live?s=' + Stream._id)}
              >
                Theo d√µi stream c·ªßa b·∫°n t·∫°i ƒë√¢y
              </div>
            )}

            <div style={{ display: 'flex' }} className='mt-20 mb-30'>
              <button type='submit' className='button-upload'>
                B·∫Øt ƒë·∫ßu
              </button>
              <button type='button' className='button-upload ml-20' onClick={handleStopStream}>
                K·∫øt th√∫c
              </button>
            </div>
          </form>
        </TabPane>

        {/* <TabPane name='Chat' key='3'>
          <div className='setup__tabChat1'>
            <div className='setup__tabChat1-chatCtn'>
              <div className='setup__tabChat1-name'>Tr√† Long{':'}</div>
              <div className='setup__tabChat1-text'>
                Grab your ‚òï, ‚òÄÔ∏è Grab your üö∞!, üåá Grab your üçπ, and join me every Friday morning to
                explore the beauty of digital risk-taking & learning to draw and sketchnote with Adobe
                Fres
              </div>
              <div className='setup__tabChat1-menu'>
                <HiIcon.HiDotsVertical className='icon' />
              </div>
            </div>

            <div className='setup__tabChat1-chatCtn'>
              <div className='setup__tabChat1-name'>dinhgiavu@kingdomgame.co{':'}</div>
              <div className='setup__tabChat1-text'>
                Grab your ‚òï, ‚òÄÔ∏è Grab your
                üö∞!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
              </div>
              <div className='setup__tabChat1-menu'>
                <HiIcon.HiDotsVertical className='icon' />
              </div>
            </div>

            <div className='setup__tabChat1-chatCtn'>
              <div className='setup__tabChat1-name'>Tr√† Long{':'}</div>
              <div className='setup__tabChat1-text'>
                Grab your ‚òï, ‚òÄÔ∏è Grab your üö∞!, üåá Grab your üçπ, and join me every Friday morning to
                explore the beauty of digital risk-taking & learning to draw and sketchnote with Adobe
                Fres
              </div>
              <div className='setup__tabChat1-menu'>
                <HiIcon.HiDotsVertical className='icon' />
              </div>
            </div>
          </div>
          <div className='setup__tabChat2'>
            <div className='setup__tabChat2-avatar'>
              <img src={avatar1} alt='' />
            </div>
            <div className='setup__tabChat2-chatBox'>
              <input type='text' placeholder='Say something' />
              <RiIcon.RiSendPlaneFill className='icon icon-send' />
              <RiIcon.RiEmotionLaughLine className='icon icon-emo' />
            </div>
          </div>
        </TabPane> */}
      </Tab>
    </>
  );
};

SetupRight.propTypes = {
  Stream: PropTypes.object.isRequired,
  readURL: PropTypes.func.isRequired,
  handlePublicStream: PropTypes.func.isRequired,
  handleStopStream: PropTypes.func.isRequired,
  CopyToClipboard: PropTypes.func.isRequired,
};

export default SetupRight;
